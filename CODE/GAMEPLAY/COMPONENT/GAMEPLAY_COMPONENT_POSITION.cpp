//
//  GAMEPLAY_COMPONENT_POSITION.cpp
//  GAME-ENGINE
//
//  Created by Christophe Bernard on 28/03/15.
//  Copyright (c) 2015 Christophe Bernard. All rights reserved.
//

#include "GAMEPLAY_COMPONENT_POSITION.h"
#include "CORE_MEMORY.h"
#include "CORE_DATA_STREAM.h"


CORE_ABSTRACT_PROGRAM_BINDER_DECLARE_CLASS( GAMEPLAY_COMPONENT_POSITION )
    CORE_ABSTRACT_PROGRAM_BINDER_DEFINE_YIELD_METHOD( CORE_MATH_VECTOR &, GAMEPLAY_COMPONENT_POSITION, GetPosition )
    CORE_ABSTRACT_PROGRAM_BINDER_DEFINE_VOID_METHOD_1(GAMEPLAY_COMPONENT_POSITION, SetPosition, const CORE_MATH_VECTOR & )
    CORE_ABSTRACT_PROGRAM_BINDER_DEFINE_VOID_METHOD_1(GAMEPLAY_COMPONENT_POSITION, SetOrientation, const CORE_MATH_QUATERNION & )
    CORE_ABSTRACT_PROGRAM_BINDER_DEFINE_YIELD_METHOD( CORE_MATH_QUATERNION &, GAMEPLAY_COMPONENT_POSITION, GetOrientation )
CORE_ABSTRACT_PROGRAM_BINDER_END_CLASS( GAMEPLAY_COMPONENT_POSITION )

GAMEPLAY_COMPONENT_POSITION::GAMEPLAY_COMPONENT_POSITION() :
    PositionOffset(),
    Velocity(),
    Spin(),
    Pose() {
    
}

GAMEPLAY_COMPONENT_POSITION::GAMEPLAY_COMPONENT_POSITION( const GAMEPLAY_COMPONENT_POSITION & other ) :
    PositionOffset( other.PositionOffset ),
    Velocity( other.Velocity ),
    Spin( other.Spin ),
    Pose( other.Pose ){
    
}

GAMEPLAY_COMPONENT_POSITION::~GAMEPLAY_COMPONENT_POSITION() {

}

bool GAMEPLAY_COMPONENT_POSITION::Intersects( const CORE_MATH_RAY & ray ) {
    
    return true;
}

int GAMEPLAY_COMPONENT_POSITION::ComponentType = GAMEPLAY_COMPONENT_TYPE_Position;
